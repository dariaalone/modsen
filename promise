function asyncOperation1() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('Operation 1 completed');
      resolve('Result 1');
    }, 1000);
  });
}

function asyncOperation2(previousResult) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('Operation 2 completed');
      resolve(`${previousResult}, Result 2`);
    }, 1000);
  });
}

function asyncOperation3(previousResult) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('Operation 3 completed');
      resolve(`${previousResult}, Result 3`);
    }, 1000);
  });
}

function executeSequentially() {
  asyncOperation1()
    .then(result1 => {
      return asyncOperation2(result1);
    })
    .then(result2 => {
      return asyncOperation3(result2);
    })
    .then(finalResult => {
      console.log('All operations completed:', finalResult);
    })
    .catch(error => {
      console.error('An error occurred:', error);
    });
}

executeSequentially();
